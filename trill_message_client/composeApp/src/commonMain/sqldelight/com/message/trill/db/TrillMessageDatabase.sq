-- Store identity keys per user
CREATE TABLE IF NOT EXISTS identity_key (
    user_email TEXT NOT NULL,
    public_key BLOB NOT NULL,
    private_key BLOB NOT NULL,
    PRIMARY KEY (user_email)
);

-- Store signed prekeys per user
CREATE TABLE IF NOT EXISTS signed_prekey (
    user_email TEXT NOT NULL,
    id INTEGER NOT NULL,
    public_key BLOB NOT NULL,
    private_key BLOB NOT NULL,
    signature BLOB NOT NULL,
    PRIMARY KEY (user_email, id)
);

-- Store one-time prekeys per user
CREATE TABLE IF NOT EXISTS one_time_prekeys (
    user_email TEXT NOT NULL,
    id INTEGER NOT NULL,
    public_key BLOB NOT NULL,
    private_key BLOB NOT NULL,
    PRIMARY KEY (user_email, id)
);

-- Store user records
CREATE TABLE IF NOT EXISTS user_records (
    user_id TEXT PRIMARY KEY,
    nickname TEXT,
    is_stale INTEGER NOT NULL DEFAULT 0,
    stale_since INTEGER
);

-- Store device records
CREATE TABLE IF NOT EXISTS device_records (
    user_id TEXT NOT NULL,
    device_id TEXT NOT NULL,
    public_key BLOB NOT NULL,
    is_stale INTEGER NOT NULL DEFAULT 0,
    stale_since INTEGER,
    active_session_id TEXT,
    FOREIGN KEY (user_id) REFERENCES user_records(user_id),
    PRIMARY KEY (user_id, device_id)
);

-- Store session data
CREATE TABLE IF NOT EXISTS sessions (
    session_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    device_id TEXT NOT NULL,
    ratchet_state BLOB NOT NULL,
    is_initiating INTEGER NOT NULL,
    timestamp INTEGER NOT NULL,
    FOREIGN KEY (user_id, device_id) REFERENCES device_records(user_id, device_id)
);

-- Store client info for multiple users
CREATE TABLE IF NOT EXISTS client_info (
    user_email TEXT NOT NULL,
    user_nickname TEXT,
    device_id TEXT NOT NULL,
    PRIMARY KEY (user_email)
);

--Store message data
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    sender_email TEXT NOT NULL,
    receiver_email TEXT NOT NULL, -- The other participant in the conversation
    content TEXT NOT NULL,
    timestamp INTEGER NOT NULL, -- Store as Epoch Milliseconds
    is_sent_by_local_user INTEGER NOT NULL -- 0 for false, 1 for true
);

-- Index for faster conversation loading
CREATE INDEX IF NOT EXISTS idx_messages_conversation ON messages(sender_email, receiver_email, timestamp);
CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages(timestamp);


-- Queries
insertMessage:
INSERT INTO messages (sender_email, receiver_email, content, timestamp, is_sent_by_local_user)
VALUES (?, ?, ?, ?, ?);

getMessagesForConversation:
SELECT id, sender_email, receiver_email, content, timestamp, is_sent_by_local_user
FROM messages
WHERE (sender_email = :user1_email AND receiver_email = :user2_email)
   OR (sender_email = :user2_email AND receiver_email = :user1_email)
ORDER BY timestamp ASC;

getRecentConversations:
SELECT DISTINCT
    CASE
        WHEN sender_email = :current_user_email THEN receiver_email
        ELSE sender_email
    END AS contact_email,
    MAX(timestamp) AS last_timestamp
FROM messages
WHERE sender_email = :current_user_email OR receiver_email = :current_user_email
GROUP BY contact_email
ORDER BY last_timestamp DESC;

selectClientInfo:
SELECT user_email, user_nickname, device_id FROM client_info WHERE user_email = ?;

insertOrReplaceClientInfo:
INSERT OR REPLACE INTO client_info (user_email, user_nickname, device_id) VALUES (?, ?, ?);

listClientInfos:
SELECT user_email, user_nickname, device_id FROM client_info;

selectIdentityKey:
SELECT public_key, private_key FROM identity_key WHERE user_email = ?;

insertIdentityKey:
INSERT OR REPLACE INTO identity_key (user_email, public_key, private_key) VALUES (?, ?, ?);

deleteIdentityKey:
DELETE FROM identity_key WHERE user_email = ?;

selectSignedPreKey:
SELECT id, public_key, private_key, signature FROM signed_prekey WHERE user_email = ? AND id = ?;

selectLatestSignedPreKey:
SELECT id, public_key, private_key, signature FROM signed_prekey WHERE user_email = ? ORDER BY id DESC LIMIT 1;

insertSignedPreKey:
INSERT OR REPLACE INTO signed_prekey (user_email, id, public_key, private_key, signature) VALUES (?, ?, ?, ?, ?);

deleteSignedPreKey:
DELETE FROM signed_prekey WHERE user_email = ? AND id = ?;

deleteAllSignedPreKeys:
DELETE FROM signed_prekey WHERE user_email = ?;

selectOneTimePreKey:
SELECT id, public_key, private_key FROM one_time_prekeys WHERE user_email = ? AND id = ?;

selectFirstOneTimePreKey:
SELECT id, public_key, private_key FROM one_time_prekeys WHERE user_email = ? ORDER BY id ASC LIMIT 1;

insertOneTimePreKey:
INSERT INTO one_time_prekeys (user_email, id, public_key, private_key) VALUES (?, ?, ?, ?);

deleteOneTimePreKey:
DELETE FROM one_time_prekeys WHERE user_email = ? AND id = ?;

selectAllUserRecords:
SELECT user_id, nickname, is_stale, stale_since FROM user_records;

insertOrReplaceUserRecord:
INSERT OR REPLACE INTO user_records (user_id, nickname, is_stale, stale_since) VALUES (?, ?, ?, ?);

selectDevicesByUser:
SELECT user_id, device_id, public_key, is_stale, stale_since, active_session_id FROM device_records WHERE user_id = ?;

insertOrReplaceDeviceRecord:
INSERT OR REPLACE INTO device_records (user_id, device_id, public_key, is_stale, stale_since, active_session_id)
VALUES (?, ?, ?, ?, ?, ?);

selectSessionsByDevice:
SELECT session_id, user_id, device_id, ratchet_state, is_initiating, timestamp
FROM sessions WHERE user_id = ? AND device_id = ?;

insertOrReplaceSession:
INSERT OR REPLACE INTO sessions (session_id, user_id, device_id, ratchet_state, is_initiating, timestamp)
VALUES (?, ?, ?, ?, ?, ?);